{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Introduction to model fitting in R\"\nauthor: \"Sam Abbott\"\ndate: \"27/09/2016\"\noutput: html_document\ntoc: true\n\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message=FALSE)\n```\n\n# Introduction\n[**Lecture slides**](http://sbfnk.github.io/mfiidd/slides/intro_slides.pdf)\n\nThis courses uses the fit R package and I will draw from the tidyverse for additional code\n\n```{r load packages, echo=TRUE, message=FALSE}\n#install.packages('tidyverse')\nlibrary(tidyverse)\n\n# install.packages(\"devtools\")\nlibrary(devtools)\n\n# install_github(\"sbfnk/fitR@fitcourse_2016\")\nlibrary(fitR)\n```\n\n![Outline of the course](figures/Course_Outline.png)\n\n#Objectives\n\n- familiarise with the stucture of models in the fitR package\n- combine prior and likelihood to calculate the posterior of a simple SIR model\n- explore the posterior of a model that has a single parameter\n\n\n![Summary of the general model fitting process](figures/Model_Fitting_process.png)\n\n![Summary of the bayesian model fitting process](figures/Bayesian_Model_Fit.png)\n\n#Deterministic SIR model\n\n\n```{r load models}\n\n#Load SIR model and investigate structure\ndata(SIR)\nnames(SIR)\n\n#contents of the SIR model\nSIR\n```\n\n#Simulate\n\n```{r simulate SIR}\n#Load parameters\ntheta <- c(R0 = 3, D_inf = 2)\ninit.state <- c(S = 999, I = 1, R = 0)\ntimes <- 1:100\n\n#Simulate model\ntraj <- SIR$simulate(theta, init.state, times) %>% as_data_frame\n\n#Output of run\nhead(traj)\n\n#Plot simulations\nplotTraj(traj)\n```\n\n#Prior\n\nTo evaluate the log of the prior for a certain combination of parameters \n\n```{r prior SIR}\nSIR$dprior(theta)\nSIR$dprior(theta, log = TRUE)\n```\n\n#Likelihood\n\nevaluate the likelihood of a data point\n\n```{r likelihood SIR}\nSIR$dPointObs(data.point = c(obs = 18), model.point = c(I = 31), theta, log = TRUE)\n```\n\n\n```{r outbreak data SIR}\ndata(epi)\nhead(epi1)\nplotTraj(data = epi1)\ndTrajObs(SIR, theta, init.state, epi1, log = TRUE)\n```\n\n#Generate observations\nadd measurement uncertainty\n\n```{r simulate with uncertainty SIR}\nSIR$rPointObs(model.point = c(I = 31), theta)\n\nobs.traj <- rTrajObs(SIR, theta, init.state, epi1$time) %>% as_data_frame\n\nobs.traj\n```\n\n#Calculate the posterior\n\n```{r Posterior function}\n\n# This is a function that takes 4 arguments:\n# - fitmodel, a fitmodel object that defines the model dynamics,\n#   prior and likelihoods.\n# - theta, a named vector of parameters\n# - init.state,  a named vector of initial state\n# - data, the data set we are fitting the model to\n# It should return the posterior for the given model, parameters,\n# initial state and data.\nmy_dLogPosterior <- function(fitmodel, theta, init.state, data) {\n\n    log.prior <- fitmodel$dprior(theta, log=TRUE)\n\n    log.likelihood <- dTrajObs(fitmodel, theta, init.state, data, log=TRUE)\n    \n    log.posterior <- log.likelihood -   log.prior\n\n    return(log.posterior)\n}\n\n#Check\nmy_dLogPosterior(SIR, theta, init.state, epi1)\n```\n\n# Assess the model fit\n\n```{r model fit, results=FALSE, message=FALSE, include=FALSE}\n\nplot_fit <- plotFit(SIR, theta, init.state, epi1, n.replicates=100, plot=FALSE)\n```\n\n```{r plot model fit}\n#plot_fit <- plotFit(SIR, theta, init.state, epi1, n.replicates=100, plot=FALSE)\nplot_fit$plot\n```\n\n#Explore the posterior\n\n```{r explore distributions, results=FALSE, message=FALSE}\n#Switch to normally distributed priors\nSIR$dprior <- function(theta, log = FALSE) {\n\n    ## uniform prior on R0: U[1,100]\n    log.prior.R0 <- dnorm(theta[[\"R0\"]], mean=10, log = TRUE)\n    ## uniform prior on infectious period: U[0,30]\n    log.prior.D <- dnorm(theta[[\"D_inf\"]], mean=15, log = TRUE)\n\n    log.sum <- log.prior.R0 + log.prior.D\n\n    return(ifelse(log, log.sum, exp(log.sum)))\n}\n\n#Switch to normal distributed observation error\nSIR$dPointObs <- function(data.point, model.point, theta, log = FALSE) {\n    # the prevalence is observed through a normally distributed process\n    return(dnorm(x = data.point[[\"obs\"]], mean = model.point[[\"I\"]], log = log))\n}\n```\n\n```{r explore model, results=FALSE, message=FALSE, include=FALSE}\n#Explore effect this has\nplot_fit <- plotFit(SIR, theta, init.state, epi1, n.replicates=100, plot=FALSE)\n```\n\n```{r plot explore dist}\n#plot_fit <- plotFit(SIR, theta, init.state, epi1, n.replicates=100, plot=FALSE)\nplot_fit$plot\n```\n\n#Going Further\n\n## Imperfect reporting of cases\n\n```{r Imperfect reporting}\nepi2 %>% as_data_frame\n```\n\n\n## Include demographic process and seasonal forcing\n\n- added natural birth death \n- added forcing\n```{r SIR_bd_forced}\nSIR_bd_forced <- SIR \n\n#Change model name\nSIR_bd_forced$name <- 'SIR model with seasonal forcing and natural birth/death'\n\n#Add forcing function \n SIR_bd_forced$forcing <- function(time, parameters){\n   1+parameters[['amplitude']]*sin(2*pi*time/parameters[['period']])\n }\n \n#Add new parameters\nSIR_bd_forced$theta.names <- c(SIR_bd_forced$theta.names, 'b','d', 'period', 'amplitude')\n\n#Adjust model\nSIR_bd_forced$simulate <- function (theta, init.state, times) \n{\n    SIR_ode <- function(time, state, parameters) {\n        beta <- parameters[[\"R0\"]]/parameters[[\"D_inf\"]]\n        nu <- 1/parameters[[\"D_inf\"]]\n        S <- state[[\"S\"]]\n        I <- state[[\"I\"]]\n        R <- state[[\"R\"]]\n        N <- S + I + R\n        dS <- -beta * SIR_bd_forced$forcing(time, parameters) * S * I/N + parameters[['b']]*N - parameters[['d']]*S\n        dI <- beta * SIR_bd_forced$forcing(time, parameters) * S * I/N - nu * I - parameters[['d']]*I\n        dR <- nu * I - parameters[['d']]*R\n        return(list(c(dS, dI, dR)))\n    }\n    trajectory <- data.frame(ode(y = init.state, times = times, \n        func = SIR_ode, parms = theta, method = \"ode45\"))\n    return(trajectory)\n}\n\n#Add new priors\nSIR_bd_forced$dprior <- function (theta, log = FALSE) \n{\n    log.prior.R0 <- dnorm(theta[[\"R0\"]], mean = 10, log = TRUE)\n    log.prior.D <- dnorm(theta[[\"D_inf\"]], mean = 15, log = TRUE)\n    log.prior.b <- dnorm(theta[[\"b\"]], mean = 0.05, log = TRUE)\n    log.prior.d <- dnorm(theta[[\"d\"]], mean = 0.05, log = TRUE)\n    log.prior.period <- dnorm(theta[[\"period\"]], mean = 1, log = TRUE)\n    log.prior.period <- dnorm(theta[[\"amplitude\"]], mean = 0, log = TRUE)\n    log.sum <- log.prior.R0 + log.prior.D + log.prior.b +  log.prior.d +  log.prior.period\n    return(ifelse(log, log.sum, exp(log.sum)))\n}\n```\n\n```{r update parameters - b/d, results=FALSE, message=FALSE}\n#Load parameters\ntheta <- c(R0 = 2, D_inf = 2, b=1/80, d=1/80, period=1, amplitude=0)\ninit.state <- c(S = 999, I = 1, R = 0)\ntimes <- 1:100\n```\n\n```{r sim update parameters - b/d, include=FALSE}\n#Explore effect this has - just birth death\nplot_fit <- plotFit(SIR_bd_forced, theta, init.state, epi1, n.replicates=100, plot=FALSE)\nplot_fit$plot\n```\n\n```{r update parameters - forced, results=FALSE, message=FALSE}\n#Load parameters\ntheta <- c(R0 = 2, D_inf = 2, b=0, d=0, period=10, amplitude=0.5)\ninit.state <- c(S = 999, I = 1, R = 0)\ntimes <- 1:100\n```\n\n```{r update sim - forced, include=FALSE}\n#Explore effect this has - just birth death\nplot_fit <- plotFit(SIR_bd_forced, theta, init.state, epi1, n.replicates=100, plot=FALSE)\nplot_fit$plot\n```\n\n```{r update parameters - b/d, forced, results=FALSE, message=FALSE}\n#both forcing and b/d\n#Load parameters\ntheta <- c(R0 = 2, D_inf = 2, b=1/10, d=1/10, period=10, amplitude=0.5)\ninit.state <- c(S = 999, I = 1, R = 0)\ntimes <- 1:100\n```\n\n```{r update sim - b/d, forced, include=FALSE}\n#Explore effect this has - just birth death\nplot_fit <- plotFit(SIR_bd_forced, theta, init.state, epi1, n.replicates=100, plot=FALSE)\nplot_fit$plot\n```\n",
    "created" : 1474983276528.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2390296049",
    "id" : "22F1098B",
    "lastKnownWriteTime" : 1474992374,
    "last_content_update" : 1474992374390,
    "path" : "~/Dropbox/PhD/Useful Notes/MFIID_course/Intro.Rmd",
    "project_path" : "Intro.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}